/**
 * @author Ofek Gila
 * @since August 30th, 2016
 * @version September 1st, 2016
 */

var href = '', modified, removed;

/**
 * Youtube leaves the same page open but changes the content
 * and the href when you click on other videos, so I have to
 * constantly check the href to see if the video was changed.
 */
setInterval(function () {
	let tempref = window.location.href;
	modified = removed = false;
	if (tempref !== href) {
		href = tempref;
		if (href.indexOf("watch") !== -1)
			newPage();0
	}
}, 100);

/**
 * Function to cause havoc onto each new page (youtube video),
 * incrementing the number of youtube strikes locally stored
 * (he always uses the same chromebook so I don't need to worry
 * with making this extension official and associating the data
 * with his email account, although I do have a developer account),
 * modifying the content of the page, and and having a nice
 * little surprise whenever he gets a multiple of 10 youtube
 * strikes ;).
 */
function newPage() {
	let numYoutubeStrikes = parseInt(localStorage.getItem("youtubeStrikes")) || 0;
	numYoutubeStrikes++;
	localStorage.setItem("youtubeStrikes", numYoutubeStrikes);

	var modifyContents = setInterval(function () {
		if (!modified)
			modifyContent(numYoutubeStrikes);
		if (!removed)
			removeContent();
		if (modified && removed)
			clearInterval(modifyContents);
	}, 10);

	modifyContent(numYoutubeStrikes);
	removeContent();

	setInterval(function () {
		let videoTitles = document.querySelectorAll("span.title:not(.striked)");
		for (let i = 0; i < videoTitles.length; i++)	{
			videoTitles[i].innerHTML = "Ofek strikes again!";
			videoTitles[i].className += " striked";
		}

		let videoAuthors = document.querySelectorAll("span.g-hovercard:not(.striked)");
		for (let i = 0; i < videoAuthors.length; i++)	{
			if (videoAuthors[i].className === "g-hovercard")
				videoAuthors[i].innerHTML = "Ofek strikes again!";
			videoAuthors[i].className += " striked";
		}

		let videoViews = document.querySelectorAll("span.view-count:not(.striked)");
		for (let i = 0; i < videoViews.length; i++)	{
			videoViews[i].innerHTML = numYoutubeStrikes + " youtube strikes!";
			videoViews[i].className += " striked";
		}
	}, 100);

	if (numYoutubeStrikes % 10 === 0 && href !== "https://www.youtube.com/watch?v=wSGkBWYDmrM") {
		alert("You got " + numYoutubeStrikes + " youtube strikes!");
		window.confirm("Now go away, or I shall taunt you a second time!");
		numYoutubeStrikes--;
		localStorage.setItem("youtubeStrikes", numYoutubeStrikes);
		window.location.href = "https://www.youtube.com/watch?v=wSGkBWYDmrM";
	}
}

/**
 * Changes content under video to say "Ofek strikes again!",
 * and shows number of youtube strikes instead of youtube views.
 * @param  {String}
 * @return {undefined}
 */
function modifyContent(numYoutubeStrikes) {
	try {
		document.getElementById("eow-title").innerHTML = "Ofek strikes again!";
		document.querySelector("#watch7-user-header > div > a").innerHTML = "Ofek strikes again!"
		"Ofek strikes again!";
		let subButtons = document.querySelector(".yt-uix-button-subscription-container span.yt-uix-button-content").children;
		for (let i = 0; i < subButtons.length; i++)
			subButtons[i].innerHTML = "Ofek strikes again!";
		if (numYoutubeStrikes + " youtube strikes!" === (document.querySelector("#watch7-subscription-container > span > span.yt-subscription-button-subscriber-count-branded-horizontal.yt-subscriber-count").innerHTML = numYoutubeStrikes + " youtube strikes!"))
			modified = true;
	}	catch (exception) {
		console.error(exception);
	}
}

/**
 * Removes all bothersome content under the youtube video.
 * @return {undefined}
 */
function removeContent() {
	try {
		document.getElementById("watch8-action-buttons").remove();
		document.getElementById("watch-action-panels").remove();
		document.getElementById("action-panel-details").remove();
		document.getElementById("watch-discussion").remove();
		removed = true;
	}	catch (exception) {
		console.error(exception);
	}
}

/**
 * Makes removing an element easier.
 * @return {undefined}
 */
Element.prototype.remove = function() {
	this.parentElement.removeChild(this);
}

NodeList.prototype.remove = HTMLCollection.prototype.remove = function () {
	for(var i = this.length - 1; i >= 0; i--)
		if  (this[i] && this[i].parentElement)
			this[i].parentElement.removeChild(this[i]);
}
